networks:
  wellness_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  ollama_models:
  nginx_logs:

services:
  # === LAYER 5: Infrastructure Services ===
  
  # PostgreSQL Database with pgvector
  postgres:
    image: ankane/pgvector:latest
    container_name: wellness_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/infrastructure/docker/postgres/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - wellness_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wellness_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./services/infrastructure/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - wellness_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: wellness_qdrant
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
      QDRANT__SERVICE__ENABLE_CORS: true
      QDRANT__CLUSTER__ENABLED: false
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - wellness_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Ollama Local LLM
  ollama:
    image: ollama/ollama:latest
    container_name: wellness_ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_PORT: 11434
      OLLAMA_ORIGINS: "*"
      OLLAMA_MODELS: /root/.ollama/models
      OLLAMA_KEEP_ALIVE: 5m
      OLLAMA_DEBUG: false
    volumes:
      - ollama_models:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - wellness_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # === LAYER 4: Data Management Service ===
  
  data-layer:
    build:
      context: ./services/data-layer
      dockerfile: Dockerfile
    container_name: wellness_data_layer
    environment:
      POSTGRES_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      QDRANT_URL: http://qdrant:6333
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    depends_on:
      - postgres
      - redis
      - qdrant
    ports:
      - "8002:8000"
    networks:
      - wellness_network
    restart: unless-stopped

  # === LAYER 3: AI/ML Orchestration Service ===
  
  aiml-orchestration:
    build:
      context: ./services/aiml-orchestration
      dockerfile: Dockerfile
    container_name: wellness_aiml
    environment:
      OLLAMA_URL: http://ollama:11434
      QDRANT_URL: http://qdrant:6333
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      DATA_LAYER_URL: http://data-layer:8000
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
    depends_on:
      - ollama
      - qdrant
      - data-layer
    ports:
      - "8000:8000"  # ✅ FIXED: AI/ML service on port 8000
    networks:
      - wellness_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # === LAYER 2: Core Backend Service ===
  
  core-backend:
    build:
      context: ./services/core-backend
      dockerfile: Dockerfile
    container_name: wellness_backend
    environment:
      ENVIRONMENT: development
      DEBUG: "true"
      CORE_BACKEND_PORT: 8001
      AIML_SERVICE_URL: http://aiml-orchestration:8000
      DATA_LAYER_URL: http://data-layer:8000
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/2
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      CORS_ORIGINS: "http://localhost:3000,http://localhost:8080"
      LOG_LEVEL: INFO
    depends_on:
      - redis
      - aiml-orchestration
      - data-layer
    ports:
      - "8001:8001"  # ✅ FIXED: Core Backend on port 8001
    networks:
      - wellness_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # === LAYER 5: NGINX API Gateway (Disabled for Current Stage) ===
  
  # nginx:
  #   build:
  #     context: ./services/infrastructure/docker/nginx
  #     dockerfile: Dockerfile
  #   container_name: wellness_nginx
  #   environment:
  #     BACKEND_URL: http://core-backend:8001
  #   volumes:
  #     - nginx_logs:/var/log/nginx
  #     - ./services/infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./services/infrastructure/docker/nginx/api_gateway.conf:/etc/nginx/conf.d/default.conf
  #   depends_on:
  #     - core-backend
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   networks:
  #     - wellness_network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # === DEVELOPMENT SERVICES ===
  
  # desktop-app:
  #   build:
  #     context: ./services/desktop-app
  #     dockerfile: Dockerfile
  #   container_name: wellness_desktop
  #   environment:
  #     BACKEND_URL: http://nginx:80
  #     DISPLAY: ${DISPLAY:-:0}
  #   volumes:
  #     - /tmp/.X11-unix:/tmp/.X11-unix:rw
  #     - ./services/desktop-app/src:/app/src
  #   depends_on:
  #     - nginx
  #   networks:
  #     - wellness_network
  #   profiles:
  #     - development

  # === MONITORING & LOGGING ===
  
  # Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: wellness_prometheus
    volumes:
      - ./services/infrastructure/monitoring/prometheus:/etc/prometheus
    ports:
      - "9090:9090"
    networks:
      - wellness_network
    profiles:
      - monitoring

  # Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: wellness_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - ./services/infrastructure/monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - wellness_network
    profiles:
      - monitoring